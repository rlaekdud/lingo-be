# Workflow name
name: Gradle Build and Server Deploy - lab server

# 어떤 event가 발생하면 workflow를 실행할 시 명시
on:
  # dev branch에 push or pull request 발생 시
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

# 위 이벤트 발생 시 실행될 작업들
jobs:
  build:
    # VM의 실행 환경 지정 -> ubuntu의 최신 버전
    runs-on: ubuntu-latest

    # 실행될 jobs 순서대로 명시
    steps:
    - name: Checkout
      # uses keyword를 통해 action 불러오기
      # 여기서는 해당 repository로 checkout해 접근할 수 있는 action을 불러온다. v3도 있으니 경우에 따라 적용할 것.
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # Gradle Build를 위한 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # Gradle Build (test 제외)
    - name: Build with Gradle
      run: .gradlew clean build --exclude-task test

    - name: DockerHub Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker Image Build
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest .

    - name: Docker Push
      run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest

    - name: lab deploy server 접속 및 app 실행
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_SERVER_USERNAME }}
        password: ${{ secrets.DEPLOY_SERVER_PASSWORD }}

        script: |
          sudo docker kill ${{ secrets.DOCKER_IMAGE }}
          sudo docker rm -f ${{ secrets.DOCKER_IMAGE }}
          sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}

          sudo docker run -p ${{ secrets.PORT }}:${{ secrets.PORT }} \
          --name ${{ secrets.DOCKER_IMAGE }} \
          -d ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}
